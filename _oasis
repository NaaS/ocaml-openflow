OASISFormat: 0.3
OCamlVersion: >= 3.12
Name:        openflow
Version:     0.3.0
Authors:     Charalampos Rotsos, Richard Mortier, Anil Madhavappedy, Balraj Singh
License:     ISC
Synopsis:    OpenFlow controller, switch and flowvisor implementation in pure OCaml
Plugins:     META (0.2)
BuildTools:  ocamlbuild

Flag direct
  Description: build things over the direct xen net
  Default: false

Flag unix
  Description: build programs with a depency on lwt.unix
  Default: false

Flag xen
  Description: build xen applications
  Default: false

Library openflow
  Path:                 lib
  Findlibname:          openflow
  CompiledObject:       native
  Modules:              Ofpacket,  Ofcontroller, Ofsocket 
  Pack:                 True
  BuildDepends:         ipaddr, cstruct, cstruct.syntax, rpclib, rpclib.json, mirage, mirage-net (>= 0.3.0)

Document openflow
  Title:                OpenFlow docs
  Type:                 ocamlbuild (0.2)
  BuildTools+:          ocamldoc
  XOCamlbuildPath:      lib 
  XOCamlbuildModules:   Ofpacket, Ofcontroller, Ofsocket

Library flv
  Path:                 lib
  Findlibname:          flv
  Findlibparent:        openflow
  CompiledObject:       native
  Modules:              Flowvisor, Lldp, Flowvisor_topology 
  Pack:                 True

Library switch
  Path:                 lib
  Findlibname:          switch
  Findlibparent:        openflow
  Build$:               flag(direct)
  Install$:             flag(direct)
  CompiledObject:       native
  Modules:              Ofswitch, Ofswitch_config, Ofswitch_standalone
  Pack:                 True
  BuildDepends:         re.str, tuntap

Executable ofcontroller_lwt
  Path:                 controller
  MainIs:               lwt_controller.ml
  Build$:               flag(unix)
  Custom:               true
  CompiledObject:       native
  Install$:             flag(unix)
  BuildDepends:         openflow

Executable ofswitch_lwt
  Path:                 switch
  MainIs:               lwt_switch.ml
  Custom:               true
  Build$:               (flag(unix) && flag(direct))
  Install$:             (flag(unix) && flag(direct))
  CompiledObject:       native
  BuildDepends:         openflow, openflow.switch

Executable ofswitch
  Path:                 switch
  MainIs:               xen_switch.ml
  Build$:               flag(xen)
  CompiledObject:       native_object
  Install:              false
  BuildDepends:         openflow, re.str 

Executable ofcontroller
  Path:                 controller
  MainIs:               xen_controller.ml
  Build$:               flag(xen)
  CompiledObject:       native_object
  Install:              false
  BuildDepends:         openflow, re.str 
